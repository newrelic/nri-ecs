name: Release

on:
  release:
    types: [prereleased, released]

jobs:
  release-pipeline:
    name: Release Pipeline
    uses: newrelic/coreint-automation/.github/workflows/reusable_image_release.yaml@NR-341876-Make-docker-images-pre-release-uniform
    with:
      original_repo_name: "newrelic/nri-ecs"
      docker_platforms: "linux/amd64,linux/arm64,linux/arm"
      docker_image_name: "newrelic/nri-ecs"
      s_three_path: "infrastructure_agent"
      s_three_folder: "s3://nr-downloads-main/infrastructure_agent"
      go_version_file: "go.mod"
      release_command: |
        # Version validation as in original workflow
        echo "${{ github.event.release.tag_name }}" | grep -E '^v[0-9.]*[0-9]$'
        
        # Set S3 base folder with /test for pre-releases
        if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
          export S3_BASE_FOLDER="s3://nr-downloads-main/infrastructure_agent/test"
        else
          export S3_BASE_FOLDER="s3://nr-downloads-main/infrastructure_agent"
        fi
        
        # Build and upload steps with correct version handling
        make compile-multiarch RELEASE_VERSION=$VERSION
        
        # RELEASE_VERSION stays without suffix, only NRI_ECS_IMAGE_TAG gets the suffix
        make upload_manifests RELEASE_VERSION=$VERSION NRI_ECS_IMAGE_TAG=$VERSION$TAG_SUFFIX
      use_build_push_action: true
      use_custom_release: true
      setup_aws_creds: true
      run_nix_unit_tests: false
      run_windows_unit_tests: false
      run_integration_tests: false
    secrets:
      docker_username: ${{ secrets.FSI_DOCKERHUB_USERNAME }}
      docker_password: ${{ secrets.FSI_DOCKERHUB_TOKEN }}
      bot_token: ${{ secrets.COREINT_BOT_TOKEN }}