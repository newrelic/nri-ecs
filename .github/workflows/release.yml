name: Release

on:
  release:
    types: [prereleased, released]

jobs:
  release-pipeline:
    name: Release Pipeline
    uses: newrelic/coreint-automation/.github/workflows/reusable_image_release.yaml@v3
    with:
      original_repo_name: "newrelic/nri-ecs"
      docker_image_name: "newrelic/nri-ecs"
      
      setup_aws_creds: true

      release_command_sh: |
        
        # Build the integration
        make compile-multiarch RELEASE_VERSION=$VERSION

        make ci/prerelease-fips
        
        # Append /test to S3 base folder for pre-releases
        if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
          export S3_BASE_FOLDER="${S3_BASE_FOLDER}/test"
        fi
        
        # Pushes the image with / without "-pre" suffix based on if its a pre release 
        docker buildx build --push --platform=$DOCKER_PLATFORMS \
          -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG \
          .
        
        # Push latest tag if its a release
        if [[ "${{ github.event.release.prerelease }}" == "false" ]]; then
          docker buildx build --push --platform=$DOCKER_PLATFORMS \
            -t $DOCKER_IMAGE_NAME:latest \
            .
        fi
        
        # Upload configuration files
        make upload_manifests RELEASE_VERSION=$VERSION NRI_ECS_IMAGE_TAG=$DOCKER_IMAGE_TAG

    secrets:
      docker_username: ${{ secrets.FSI_DOCKERHUB_USERNAME }}
      docker_password: ${{ secrets.FSI_DOCKERHUB_TOKEN }}
      bot_token: ${{ secrets.COREINT_BOT_TOKEN }}
      aws_access_key_id: ${{ secrets.COREINT_AWS_ACCESS_KEY_ID }}
      aws_access_key_secret: ${{ secrets.COREINT_AWS_SECRET_ACCESS_KEY }}
      slack_channel: ${{ secrets.COREINT_SLACK_CHANNEL }}
      slack_token: ${{ secrets.COREINT_SLACK_TOKEN }}